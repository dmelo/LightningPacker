<ul class="toc"></ul>

<h2>Introduction</h2>

<p>LightningPacker aims to help your website to better delivery content to its users. Instead of make an awful amount of requisitions per page load, do just one for all your javascript content and another one for your css files.</p>

<p>LightningPacker takes care of gather all your scripts into just one file, minify and compress it. It also set the better cache policies. Everything needed to achive the optimum on JS and CSS content delivery is here.</p>

<p>This documentation explains how to work with LightningPacker and how LightningPacker works.</p>

<h2>Usage</h2>

<p>LightningPacker works through an API. This API can be used to pack CSS or Javascript scripts. You must specify the type of pack you want to produce (CSS or Javascript) and the objects to pack. The table bellow shows the full arguments list for creating your packages.</p>

<table>
<thead>
<tr class="topic">
<th>Argument</th>
<th>Description</th>
<th>Option</th>
</tr>
</thead>
<tbody>
<?
foreach($this->table as $row) {
    echo '<tr>';
    foreach($row as $ele)
	echo '<td>' . $ele . '</td>';
    echo '</tr>';
}
?>
</tbody>
</table>

<p>The requisition for a package is made by GET request. The base URL is <span class="highlight">http://lightningpacker.net/packit.php</span> . If you want to pack the jQuery library together with its TableSort plugin, the LightningPacker URL would be <span class="highlight"><?= htmlentities('http://lightningpacker.net/packit.php?type=js&obj[]=http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js&obj[]=http://autobahn.tablesorter.com/jquery.tablesorter.min.js'); ?></span>.</p>

<p>Once the package is done you can use it by provinding the hash parameter together with its type. The base URL for this operation is <span class="highlight">http://lightningpacker.net/get.php</span>. See bellow, the list of possible arguments.</p>

<table>
<thead>
<tr class="topic">
<th>Argument</th>
<th>Description</th>
<th>Option</th>
</tr>
</thead>
<tbody>
<?
foreach($this->table2 as $row) {
    echo '<tr>';
    foreach($row as $ele)
	echo '<td>' . $ele . '</td>';
    echo '</tr>';
}
?>
</tbody>
</table>


<p>The /get.php is pure php, with no framework underneath to slow things down.</p>


<h2>Support for PHP</h2>

<p>For PHP applications, it's also possible to use the PHP library built to handle the API and output the HTML code that calls the scripts.</p>

<p>Just include the file <a href="/LightningPacker.php.txt">LightningPacker.php</a> and use the function lightningPacker. The functino creates a package the first time a combination of scripts is assembled and, for the further requests, it calls the get.php, mentioned on the previous section.</p>

<p>The <a href="/examples">Examples</a> section contains an example of how to use this library.</p>

<h2>Source Code</h2>

<p>This is an open source project. <a target="_blank" href="/packit.php.txt">packit.php</a> is the script responsable for creating the packages while <a target="_blank" href="/get.php.txt">get.php</a> retrieves the cached content. Feel free to look around.</p>

<h2>Why Minify?</h2>

<p>The server already uses gzip compression to transmit data. At first it seems like its enought to reduce trafic but there is a few problems that Minify attacks and gzip don't.</p>

<p>First, Minify get rid of the comments of the code. The second thing is regarding to the compress itself. Minify renames variables and functions in a way to minimize the amount of information needed. It follows the same thinking of the Huffman's algorithm for text compression but it cares about the language's syntax. Moreover, it strips out white chars that are unecessary.</p>

<p>To demonstrate minified and compressed files are smaller than just compressed files, have the file <a href="/txt/file_full.txt">file_full.txt"</a> as an example of non-minified file and <a href="/txt/file_minified.txt">file_minified.txt</a> is it's minified version. After apply gzip over this two files it have 13.8KB and 9.4KB, respectively.</p>

<p>The conclusion is that the use of Minify will reduce the amount of data needed to load scripts</p>

<h2>Cache compressed files</h2>

<p>Usually files are cached text plain and then, when a requisition arrives, Apache fetchs it from the cache and compress the content on run time. This is bad. Gzip is not very light at the point of letting it run wild like this.</p>

<p>Lightning packer store/cache compressed files so that there is no need to run gzip per requisition.</p>

<p>To show the performance difference a test was performed. A JS file not compressed have 132.3 KB. If a requisition is made for this file with Apache set to use gzip on JS files we have the result as show on the figure bellow.</p>

<img src="/img/method-1.png" alt="Figure 1"/>

<p>For the second approach we have the script get.php which set the proper headers to tell the browser the file is compressed and then the script echo the content of the compressed file. For this second approach the result is bellow.</p>


<img src="/img/method-2.png" alt="Figure 2"/>

<p>Compress the file on the fly takes 23 ms for the request to complete while cache the file compressed make request time only 6 ms. The time to transmit the file is the same of both approaches the difference relies on the fact that the server is not using gzip for each request anymore. This is why LightningPacker saves the compressed files.</p>

<h2>Performance</h2>

<p>There is a few elements to see while analysing a performance:</p>

<ul>
<li>Number of request needed to load a page</li>
<li>Total amount of data transfered to load a page</li>
<li>Page load time</li>
</ul>

<h3>Number of Requests per Page Load</h3>

<p>In order to render the page, the browser must download the HTML file, all the CSS and JS files it references and all the objects that all those files references. Many JS and CSS scripts will produce many requests on the server. Web developers often uses CDNs to (i) improve loading time of a few scripts and (ii) reduce the server load. But great part of the scripts still hosted by the app's server site.</p>

<p>Using LightningPacker, 100% of the CSS and JS content used by the site can be hosted at LightningPacker.</p>

<h3>Total Amount of Data</h3>

<p>LightningPacker uses gzip to compress files. The compression is made after concatenate and minify all scripts, which leads to a better compression.</p>

<h3>Page Load Time</h3>
 
<p>The browser usually downloads the script in parallel in order to save time so it is expected that LightningPacker increase the time needed to load CSS and JS packages. But in fact it doesn't. Due to all the optimizations performed LightningPacker still able to achive impressive times.</p>

<p>The demo pages on <a href="/examples">examples</a> have the following results to load it's content.</p>

<a href="/img/ewolp.png" class="fancyzoom"><img src="/img/ewolp-small.png" alt="Page load NOT using LightningPacker" /></a>
<a href="/img/ewlp.png" class="fancyzoom"><img src="/img/ewlp-small.png" alt="Page load using LightningPacker" /></a>

<p>As you can see, the page load using LightningPacker is better than using calling script by script.</p>
