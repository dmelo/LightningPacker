<h2>Introduction</h2>

<p>LightningPacker aims to help your website to better delivery content to it's users. Instead of make a numerous amount of requisitions per page load do just one for all your javascript external files and another one for your css files.</p>

<p>LightningPacker takes care of gather all your scripts into just one file, minify and compress it. It also set the better cache policies. Everything needed to achive the optimum on JS and CSS content delivery is here.</p>

<p>This documentation explains how to work with LightningPacker and how LightningPacker works.</p>

<h2>Usage</h2>

<p>LightningPacker works through an API. This API can be used to pack CSS or Javascript scripts. You must specify the type of pack you want to produce (CSS or Javascript) and the objects to pack. The table bellow shows the full arguments list with examples.</p>

<table>
<thead>
<tr class="topic">
<th>Argument</th>
<th>Description</th>
<th>Option</th>
</tr>
</thead>
<tbody>
<?
foreach($this->table as $row) {
    echo '<tr>';
    foreach($row as $ele)
	echo '<td>' . $ele . '</td>';
    echo '</tr>';
}
?>
</tbody>
</table>

<p>The requisition for a package is made by GET request. The base URL is <span class="highlight">http://lightningpacker.net/packit.php</span> . If you want to pack the jQuery library together with it's TableSort plugin, the LightningPacker url would be <span class="highlight">http://lightningpacker.net/packit.php?type=js&obj[]=http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js&obj[]=http://autobahn.tablesorter.com/jquery.tablesorter.min.js</span>.</p>

<p>The /packit.php is pure php, with no framework underneath to slow things down.</p>

<h2>Source Code</h2>

<p>This is an open source project. <a target="_blank" href="/packit.php.txt">packit.php</a> is the script responsable and the links is pointing to the version running.</p>

<h2>Why Minify?</h2>

<p>The server already uses gzip compression to transmit data. At first it seems like its enought to reduce trafic but there is two problems that Minify attacks and gzip don't.</p>

<p>First, Minify strips the comments out of the code. Comments are not needed for functionality so there is need to keep it. The second thing is regarding to the compress itself. Minify renames variables and functions in a way to minimize the amount of information needed. It follows the same thinking of the Huffman's algorithm for text compression but it cares about the language's syntax.</p>

<p>To demonstrate minified and compressed files are smaller than just compressed files have the file <a href="/txt/file_full.txt">file_full.txt"</a> as an example of non-minified file and <a href="/txt/file_minified.txt">file_minified.txt</a> is it's minified version. After apply gzip over this two files it have 13.8KB and 9.4KB, respectively.</p>

<p>The conclusion is that use Minify will dramatically reduce the amount of data needed to load scripts</p>

<h2>Cache compressed files</h2>

<p>Usually files are cached text plain and then, when a requisition comes, apache fetchs it from the cache and compress the content on run time. This is bad. Gzip is not very light at the point of letting it run wild like this.</p>

<p>Lightning packer store/cache compressed files so that there is no need to run gzip per requisition.</p>

<p>To show the performance difference a test was performed. A JS file not compressed have 132.3 KB. If a requisition is made for this file with Apache set to use gzip on JS files we have the result as show on the figure bellow.</p>

<img src="/img/method-1.png" alt="Figure 1"/>

<p>For the second approach we have the script get.php which set the proper headers to tell the browser the file is compressed and then the script echo the content of the compressed file. For this second approach the result is bellow.</p>


<img src="/img/method-2.png" alt="Figure 2"/>

<p>Compress the file on the fly takes 23 ms for the request to complete while cache the file compressed make request time only 6 ms. The time to transmit the file is the same of both approaches the difference relies on the fact that the served is not using gzip per each request anymore. This is why LightningPacker saves the compressed files.</p>
