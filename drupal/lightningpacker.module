<?php

include('LightningPacker.php');

function lightningpacker_help($path, $arg) {
    $output = '';

    switch($path) {
	case 'admin/help#lightningpacker':
	    $output = '<p>' . t('Integrate Drupal with LightningPacker. Go to <a href="http://lightningpacker.net">http://lightningpacker.net</a> for more information') . '</p>';
	    break;
    }

    return $output;
}

function lightningpacker_perm() {
    return array('manage lightningpacker settings');
}

function lightningpacker_block($op = 'list', $delta = 0, $edit = array()){
    $block = array();

    if('list' === $op) {
	$block[0]['info'] = t('LightningPacker');

    }
    elseif('view' == $op) {
	$block['subject'] = 'LightningPacker';
	$block['content'] = 'bla bla bla bla bla';
    }

    return $block;
}

function lightningpacker_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page'])) {
    // If lightningpacker's preprocess function is there already, remove it.
    if (is_array($theme_registry['page']['preprocess functions']) && $key = array_search('lightningpacker_preprocess_page', $theme_registry['page']['preprocess functions'])) {
      unset($theme_registry['page']['preprocess functions'][$key]);
    }
    // Now tack it on at the end so it runs after everything else.
    $theme_registry['page']['preprocess functions'][] = 'lightningpacker_preprocess_page';
  } 
}

function _normalizeUrls($urls) {
    $newUrls = array();
    foreach($urls as $url) {
	$parsedUrl = parse_url($url);
	if(!array_key_exists('host', $parsedUrl))
	    $newUrls[] = 'http://' . $_SERVER['HTTP_HOST'] . '/' . $url;
	else
	    $newUrls[] = $url;
    }

    return $newUrls;
}

function lightningpacker_preprocess_page(&$variables) {
    $t1 = microtime(true);
    $fd = fopen('/tmp/drupal.txt', 'a');
    fwrite($fd, var_export($variables, true));
    fclose($fd);

    if(!empty($variables['scripts'])) {
	$variables['scripts'] = _lightningpacker_js($variables['scripts']);
    }
    if(!empty($variables['css'])) {
	$variables['styles'] = _lightningpacker_css($variables['css']);
    }

    $t2 = microtime(true);
    $t2 -= $t1;

    echo "<!-- LightningPacker defined in ${t2} seconds -->";
}

function _lightningpacker_js($variable) {
    $s = $variable;
    $residue = preg_replace('/<script.*src=[\'"].*[\'"].*<\/script>/U', '', $s);

    $filters = array('/<script.*src[\'"]/', '/[\'"].*<\/script>/');
    $bag = array();

    while(($pos = stripos($s, 'src="')) !== false) {
	$s = substr($s, $pos + 4);
	$pos = strpos($s, $s[0], 1);
	$url = substr($s, 1, $pos - 1);
	$bag[] = $url;
	$s = substr($s, $pos + 1);
    }
    $bag = _normalizeUrls($bag);

    return lightningPacker($bag, 'js') . $residue;
}

function _lightningpacker_css($variable) {
    foreach($variable as $media => $set) {
	$bag = array();
	foreach($set as $subSet) {
	    foreach($subSet as $css => $boolean) {
		$bag[] = $css;
	    }
	}
	$bag = _normalizeUrls($bag);
	$ret .= lightningPacker($bag, 'css', 0, array('media' => $media));
    }

    return $ret;
}
